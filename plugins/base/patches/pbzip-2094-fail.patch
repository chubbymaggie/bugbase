--- pbzip2-0.9.4/pbzip2.cpp	2005-08-30 17:30:11.000000000 +0200
+++ pbzip2-0.9.4-new/pbzip2.cpp	2015-02-06 15:39:05.341856767 +0100
@@ -89,6 +89,13 @@
 #include <windows.h>
 #endif
 
+/* Begin Crux includes */
+#include <sys/ptrace.h>
+#include <sys/wait.h>
+#include <sys/user.h>
+#include <stddef.h>
+/* End Crux includes */
+
 // uncomment for debug output
 //#define PBZIP_DEBUG
 
@@ -171,8 +178,107 @@
 int writeFileMetaData(char *);
 int testBZ2ErrorHandling(int, BZFILE *, int);
 int testCompressedData(char *);
+/* Begin Crux Code */
+void startPt() {}
+void stopPt() {}
+
+enum {
+  DR7_BREAK_ON_EXEC  = 0,
+  DR7_BREAK_ON_WRITE = 1,
+  DR7_BREAK_ON_RW    = 3,
+};
+
+enum {
+  DR7_LEN_1 = 0,
+  DR7_LEN_2 = 1,
+  DR7_LEN_4 = 3,
+};
 
+typedef struct {
+  char l0:1;
+  char g0:1;
+  char l1:1;
+  char g1:1;
+  char l2:1;
+  char g2:1;
+  char l3:1;
+  char g3:1;
+  char le:1;
+  char ge:1;
+  char pad1:3;
+  char gd:1;
+  char pad2:2;
+  char rw0:2;
+  char len0:2;
+  char rw1:2;
+  char len1:2;
+  char rw2:2;
+  char len2:2;
+  char rw3:2;
+  char len3:2;
+} dr7_t;
+
+/* We ensure the total order of data flow access with this mutex: */
+pthread_mutex_t crux_mutex = PTHREAD_MUTEX_INITIALIZER;
+
+/* Monitored variable */
+pthread_mutex_t** var;
+
+void trap(int sig, siginfo_t* info, void* ctx) {
+  pthread_mutex_lock(&crux_mutex);
+  printf("w: %lu :%x\n", pthread_self(),  var);
+  pthread_mutex_unlock(&crux_mutex);
+}
+
+int watchpoint(void* addr) {
+  var = (pthread_mutex_t**) var;
+  pid_t child;
+  pid_t parent = getpid();
+  struct sigaction trap_action;
+  int child_stat = 0;
+
+  sigaction(SIGTRAP, NULL, &trap_action);
+  trap_action.sa_sigaction = trap;
+  trap_action.sa_flags = SA_SIGINFO | SA_RESTART | SA_NODEFER;
+  sigaction(SIGTRAP, &trap_action, NULL);
+
+  if ((child = fork()) == 0) {
+    int retval = EXIT_SUCCESS;
+
+    dr7_t dr7 = {0};
+    dr7.l0 = 1;
+    dr7.rw0 = DR7_BREAK_ON_WRITE;
+    dr7.len0 = DR7_LEN_4;
+    
+    if (ptrace(PTRACE_ATTACH, parent, NULL, NULL)) {
+      exit(EXIT_FAILURE);
+    }
+
+    wait(NULL);
+    if (ptrace(PTRACE_POKEUSER, parent, offsetof(struct user, u_debugreg[0]), (void*)addr)) {
+      retval = EXIT_FAILURE;
+    }
+
+    if (ptrace(PTRACE_POKEUSER, parent, offsetof(struct user, u_debugreg[7]), dr7)) {
+      retval = EXIT_FAILURE;
+    }
+
+    if (ptrace(PTRACE_DETACH, parent, NULL, NULL)) {
+      retval = EXIT_FAILURE;
+    }
+
+    exit(retval);
+  }
+
+  waitpid(child, &child_stat, 0);
+  if (WEXITSTATUS(child_stat)) {
+    printf("child exit !0\n");
+    return 1;
+  }
 
+  return 0;
+}
+/* End Crux Code */
 /*
  *********************************************************
  */
@@ -894,7 +1000,10 @@
 			#endif
 			if (allDone == 1)
 			{
-				pthread_mutex_unlock(fifo->mut);
+				sleep(1);
+				pthread_mutex_t tmp = *(fifo->mut);
+				stopPt();
+				pthread_mutex_unlock(&tmp);
 				#ifdef PBZIP_DEBUG
 				printf ("consumer: exiting2\n");
 				#endif
@@ -994,7 +1103,7 @@
 
 	q->buf = NULL;
 	q->buf = new char*[queueSize];
-	if (q->buf == NULL)
+ 	if (q->buf == NULL)
 		return NULL;
 
 	q->bufSize = NULL;
@@ -1013,6 +1122,8 @@
 	q->tail = 0;
 
 	q->mut = NULL;
+	startPt();
+	//watchpoint(&(q->mut));
 	q->mut = new pthread_mutex_t;
 	if (q->mut == NULL)
 		return NULL;
@@ -1923,6 +2034,7 @@
 		delete MemMutex;
 		MemMutex = NULL;
 	}
+	sleep(1);
 
 	// get current time for end of benchmark
 	#ifndef WIN32
